name: Build & Release (Windows)

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Install Windows SDK (required by node-gyp)
      - name: Install Windows SDK
        shell: pwsh
        run: |
          Write-Host "Installing Windows 10 SDK..."
          choco install windows-sdk-10.0 -y
          Write-Host "Windows SDK installed"

      # Add msbuild to PATH (Visual Studio is pre-installed on windows-latest)
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      # ðŸ‘‰ Activa Developer Command Prompt (expone MSVC v143 y Windows SDK)
      - name: Setup MSVC env
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Diagnostics
        shell: pwsh
        run: |
          node -v
          npm -v
          python -V
          msbuild -version
          where cl
          # Show Visual Studio installations
          vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64
          # Check environment variables
          Write-Host "VSINSTALLDIR: $env:VSINSTALLDIR"
          Write-Host "VCToolsInstallDir: $env:VCToolsInstallDir"
          Write-Host "WindowsSdkDir: $env:WindowsSdkDir"
          Write-Host "WindowsSDKVersion: $env:WindowsSDKVersion"
          # List Windows SDK installations
          Write-Host "`nInstalled Windows SDKs:"
          if (Test-Path "C:\Program Files (x86)\Windows Kits\10\Include") {
            Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\Include" | Select-Object Name
          }

      - name: Install deps
        run: npm ci

      # ðŸ‘‰ Rebuild de nativos usando electron-rebuild (mÃ¡s robusto)
      - name: Rebuild native modules for Electron
        shell: pwsh
        env:
          # Force node-gyp to find Visual Studio 2022
          GYP_MSVS_VERSION: '2022'
          npm_config_msvs_version: '2022'
          # Set Python path explicitly
          PYTHON: python
        run: |
          # Verify environment
          Write-Host "Python: $(python -c 'import sys; print(sys.executable)')"
          Write-Host "VS Version: $env:VisualStudioVersion"
          Write-Host "Node version: $(node -v)"

          # Get exact Electron version
          $electronVersion = (Get-Content package.json | ConvertFrom-Json).devDependencies.electron -replace '\^', ''
          Write-Host "Electron version: $electronVersion"

          # Install electron-rebuild globally
          Write-Host "Installing electron-rebuild..."
          npm install -g electron-rebuild

          # Use electron-rebuild (more reliable than npm rebuild)
          Write-Host "=== Rebuilding all native modules for Electron ==="
          electron-rebuild -f -v $electronVersion

      - name: Build & publish installer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx -y electron-builder --win nsis --x64 --publish always
